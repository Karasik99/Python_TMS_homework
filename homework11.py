
"""Этот модуль был создан для решения нескольких задач:
1.Создание декоратора
2.Создание лямбда-функции
3.Создание функции и обертка в декоратор
---------------------------------------------------------------------------
Для решения данных задач я использован генераторы списков(как пример), 
а декоратор в виде универсального подсчета времени программ. 
Данный декоратор подходит для подсчета времени программ одной строкой,
вместо того что б кописасить time.time постоянно.
В наших функциях содержиться только целевой код без примесей для поддержания частоты и удобства работы.
"""
import time

# 1. Сделать свой декоратор
def timeit(func):
    def wrapper():
        start = time.time()
        res = func()
        print(time.time() - start)
            
            
        return res
    
    return wrapper

#---------------------------------------------------------------



# 2. Сделать лямбда-функцию


def my_first_lfunc():
    object = map(lambda s: s**3 , [1,2,3,4,5])
    print(list(object)) 




#---------------------------------------------------------------

# 3 Создаю генераторы списков(как пример)


def one():
    i = [x for x in range(1,100) if x % 2 ==0]
    return i




def two():
    l = []
    for i in range(10**2):
        if i % 2 == 0:
            l.append(i)
            
    return l

#----------------------------------------------------------------



# 4. Сделать функцию и обернуть декоратором

@timeit
def one():
    i = [x for x in range(1,100) if x % 2 ==0]
    return i



@timeit
def two():
    l = []
    for i in range(10**2):
        if i % 2 == 0:
            l.append(i)
            
    return l




if __name__ == '__main__':
     one()
